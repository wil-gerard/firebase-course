rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Start by closing all access by default, then add what you need
    match /{document=**} {
      allow read, write: if false;
    }

    // Firestore.rule test
    match /test/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // Helper functions
    function userIsAuthenticated() {
      return (request.auth != null)
    }

    function userIsAuthor() {
      return (request.auth.uid == resource.data.uid)
    }

    function isAdminFieldModified() {
      return 'isAdmin' in resource.data.diff(request.resource.data).affectedKeys();
    }

    function userIsAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin;
    }

    function userIsAuthorOrAdmin() {
      return userIsAuthor() || userIsAdmin()
    }

    // Security rules for to-dos
    match /todos/{document=**} {
      allow create: if userIsAuthenticated();
      allow read, write: if userIsAuthor();
    }

    // Security rules for profiles
    match /users/{document=**} {
      allow read, create: if userIsAuthenticated();
      allow update: if userIsAuthenticated() && 
        userIsAuthorOrAdmin() && 
        isAdminFieldModified() != true;
    }
  }
}