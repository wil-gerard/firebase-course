rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Start by closing all access by default, then add what you need
    match /{document=**} {
      allow read, write: if false;
    }

    // Firestore rule test
    match /test/{docId} {
      allow read: if true;
      allow write: if false;
    }

    function userIsAuthenticated() {
      return (request.auth != null)
    }

    function userIsAuthor() {
      return (request.auth.uid == resource.data.uid)
    }

    function adminIsModified() {
      return 'isAdmin' in resource.data.diff(request.resource.data).affectedKeys();
    }

    function userIsAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAdmin;
    }

    function userIsAuthorOrAdmin(userId) {
      return userIsAuthor() || userIsAdmin(userId)
    }

    // Security rules for to-dos
    match /todos/{document=**} {
      // Any authenticated user can read or write to-do items for themselves
      allow create: if userIsAuthenticated();
      // Users can read their to-do items
      allow read: if userIsAuthor();
      // Users can update their to-do items
      allow write: if userIsAuthor();
    }

    // Security rules for profiles
    match /users/{document=**} {
      // Any authenticated user can create a profile and view others' profiles
      allow read, create: if userIsAuthenticated();
      // A profile can be updated if
      //  the user is authenticated and
      //  the user is the author or an admin and
      //  the isAdmin field has not been modified 
      allow update: if userIsAuthenticated() && 
        userIsAuthorOrAdmin(request.auth.uid) && 
        adminIsModified() != true;
    }
  }
}